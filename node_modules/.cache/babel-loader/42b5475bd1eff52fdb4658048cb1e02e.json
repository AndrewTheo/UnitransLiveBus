{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getRequestKey, fetchDedupe, isRequestInFlight } from 'fetch-dedupe'; // This object is our cache\n// The keys of the object are requestKeys\n// The value of each key is a Response instance\n\nvar responseCache = {}; // The docs state that this is not safe to use in an\n// application. That's just because I am not writing tests,\n// nor designing the API, around folks clearing the cache.\n// This was only added to help out with testing your app.\n// Use your judgment if you decide to use this in your\n// app directly.\n\nexport function clearResponseCache() {\n  responseCache = {};\n}\nexport var Fetch = function (_React$Component) {\n  _inherits(Fetch, _React$Component);\n\n  _createClass(Fetch, [{\n    key: 'render',\n    value: function render() {\n      // Anything pulled from `this.props` here is not eligible to be\n      // specified when calling `doFetch`.\n      var _props = this.props,\n          children = _props.children,\n          requestName = _props.requestName;\n      var _state = this.state,\n          fetching = _state.fetching,\n          response = _state.response,\n          data = _state.data,\n          error = _state.error,\n          requestKey = _state.requestKey,\n          url = _state.url;\n\n      if (!children) {\n        return null;\n      } else {\n        return children({\n          requestName: requestName,\n          url: url,\n          fetching: fetching,\n          failed: Boolean(error || response && !response.ok),\n          response: response,\n          data: data,\n          requestKey: requestKey,\n          error: error,\n          doFetch: this.fetchRenderProp\n        }) || null;\n      }\n    }\n  }]);\n\n  function Fetch(props, context) {\n    _classCallCheck(this, Fetch);\n\n    var _this = _possibleConstructorReturn(this, (Fetch.__proto__ || Object.getPrototypeOf(Fetch)).call(this, props, context));\n\n    _this.isReadRequest = function (method) {\n      var uppercaseMethod = method.toUpperCase();\n      return uppercaseMethod === 'GET' || uppercaseMethod === 'HEAD' || uppercaseMethod === 'OPTIONS';\n    };\n\n    _this.isLazy = function () {\n      var _this$props = _this.props,\n          lazy = _this$props.lazy,\n          method = _this$props.method;\n      return typeof lazy === 'undefined' ? !_this.isReadRequest(method) : lazy;\n    };\n\n    _this.shouldCacheResponse = function () {\n      var _this$props2 = _this.props,\n          cacheResponse = _this$props2.cacheResponse,\n          method = _this$props2.method;\n      return typeof cacheResponse === 'undefined' ? _this.isReadRequest(method) : cacheResponse;\n    };\n\n    _this.getFetchPolicy = function () {\n      var _this$props3 = _this.props,\n          fetchPolicy = _this$props3.fetchPolicy,\n          method = _this$props3.method;\n\n      if (typeof fetchPolicy === 'undefined') {\n        return _this.isReadRequest(method) ? 'cache-first' : 'network-only';\n      } else {\n        return fetchPolicy;\n      }\n    };\n\n    _this.cancelExistingRequest = function (reason) {\n      if (_this.state.fetching && _this._currentRequestKey !== null) {\n        var abortError = new Error(reason); // This is an effort to mimic the error that is created when a\n        // fetch is actually aborted using the AbortController API.\n\n        abortError.name = 'AbortError';\n\n        _this.onResponseReceived(_extends({}, _this.responseReceivedInfo, {\n          error: abortError,\n          hittingNetwork: true\n        }));\n      }\n    };\n\n    _this.fetchRenderProp = function (options) {\n      return new Promise(function (resolve) {\n        // We wrap this in a setTimeout so as to avoid calls to `setState`\n        // in render, which React does not allow.\n        //\n        // tl;dr, the following code should never cause a React warning or error:\n        //\n        // `<Fetch children={({ doFetch }) => doFetch()} />\n        setTimeout(function () {\n          _this.fetchData(options, true, resolve);\n        });\n      });\n    };\n\n    _this.getRequestKey = function (options) {\n      // A request key in the options gets top priority\n      if (options && options.requestKey) {\n        return options.requestKey;\n      } // Otherwise, if we have no request key, but we do have options, then we\n      // recompute the request key based on these options.\n      // Note that if the URL, body, or method have not changed, then the request\n      // key should match the previous request key if it was computed.\n      // If you passed in a custom request key as a prop, then you will also\n      // need to pass in a custom key when you call `doFetch()`!\n      else if (options) {\n          var _Object$assign = Object.assign({}, _this.props, options),\n              url = _Object$assign.url,\n              method = _Object$assign.method,\n              body = _Object$assign.body;\n\n          return getRequestKey({\n            url: url,\n            body: body,\n            method: method.toUpperCase()\n          });\n        } // Next in line is the the request key from props.\n        else if (_this.props.requestKey) {\n            return _this.props.requestKey;\n          } // Lastly, we compute the request key from the props.\n          else {\n              var _this$props4 = _this.props,\n                  _url = _this$props4.url,\n                  _method = _this$props4.method,\n                  _body = _this$props4.body;\n              return getRequestKey({\n                url: _url,\n                body: _body,\n                method: _method.toUpperCase()\n              });\n            }\n    };\n\n    _this.fetchData = function (options, ignoreCache, resolve) {\n      // These are the things that we do not allow a user to configure in\n      // `options` when calling `doFetch()`. Perhaps we should, however.\n      var _this$props5 = _this.props,\n          requestName = _this$props5.requestName,\n          dedupe = _this$props5.dedupe,\n          beforeFetch = _this$props5.beforeFetch;\n\n      _this.cancelExistingRequest('New fetch initiated');\n\n      var requestKey = _this.getRequestKey(options);\n\n      var requestOptions = Object.assign({}, _this.props, options);\n      _this._currentRequestKey = requestKey;\n      var url = requestOptions.url,\n          body = requestOptions.body,\n          credentials = requestOptions.credentials,\n          headers = requestOptions.headers,\n          method = requestOptions.method,\n          responseType = requestOptions.responseType,\n          mode = requestOptions.mode,\n          cache = requestOptions.cache,\n          redirect = requestOptions.redirect,\n          referrer = requestOptions.referrer,\n          referrerPolicy = requestOptions.referrerPolicy,\n          integrity = requestOptions.integrity,\n          keepalive = requestOptions.keepalive,\n          signal = requestOptions.signal;\n      var uppercaseMethod = method.toUpperCase();\n\n      var shouldCacheResponse = _this.shouldCacheResponse();\n\n      var init = {\n        body: body,\n        credentials: credentials,\n        headers: headers,\n        method: uppercaseMethod,\n        mode: mode,\n        cache: cache,\n        redirect: redirect,\n        referrer: referrer,\n        referrerPolicy: referrerPolicy,\n        integrity: integrity,\n        keepalive: keepalive,\n        signal: signal\n      };\n      var responseReceivedInfo = {\n        url: url,\n        init: init,\n        requestKey: requestKey,\n        responseType: responseType\n      }; // This is necessary because `options` may have overridden the props.\n      // If the request config changes, we need to be able to accurately\n      // cancel the in-flight request.\n\n      _this.responseReceivedInfo = responseReceivedInfo;\n\n      var fetchPolicy = _this.getFetchPolicy();\n\n      var cachedResponse = void 0;\n\n      if (fetchPolicy !== 'network-only' && !ignoreCache) {\n        cachedResponse = responseCache[requestKey];\n\n        if (cachedResponse) {\n          _this.onResponseReceived(_extends({}, responseReceivedInfo, {\n            response: cachedResponse,\n            hittingNetwork: false,\n            stillFetching: fetchPolicy === 'cache-and-network'\n          }));\n\n          if (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only') {\n            return Promise.resolve(cachedResponse);\n          }\n        } else if (fetchPolicy === 'cache-only') {\n          var cacheError = new Error('Response for \"' + requestName + '\" not found in cache.');\n\n          _this.onResponseReceived(_extends({}, responseReceivedInfo, {\n            error: cacheError,\n            hittingNetwork: false\n          }));\n\n          return Promise.resolve(cacheError);\n        }\n      }\n\n      _this.setState({\n        requestKey: requestKey,\n        url: url,\n        error: null,\n        failed: false,\n        fetching: true\n      });\n\n      var hittingNetwork = !isRequestInFlight(requestKey) || !dedupe;\n\n      if (hittingNetwork) {\n        beforeFetch({\n          url: url,\n          init: init,\n          requestKey: requestKey\n        });\n      }\n\n      return fetchDedupe(url, init, {\n        requestKey: requestKey,\n        responseType: responseType,\n        dedupe: dedupe\n      }).then(function (res) {\n        if (shouldCacheResponse) {\n          responseCache[requestKey] = res;\n        }\n\n        if (_this._currentRequestKey === requestKey) {\n          _this.onResponseReceived(_extends({}, responseReceivedInfo, {\n            response: res,\n            hittingNetwork: hittingNetwork,\n            resolve: resolve\n          }));\n        }\n\n        return res;\n      }, function (error) {\n        if (_this._currentRequestKey === requestKey) {\n          _this.onResponseReceived(_extends({}, responseReceivedInfo, {\n            error: error,\n            cachedResponse: cachedResponse,\n            hittingNetwork: hittingNetwork,\n            resolve: resolve\n          }));\n        }\n\n        return error;\n      });\n    };\n\n    _this.onResponseReceived = function (info) {\n      var _info$error = info.error,\n          error = _info$error === undefined ? null : _info$error,\n          _info$response = info.response,\n          response = _info$response === undefined ? null : _info$response,\n          hittingNetwork = info.hittingNetwork,\n          url = info.url,\n          init = info.init,\n          requestKey = info.requestKey,\n          cachedResponse = info.cachedResponse,\n          _info$stillFetching = info.stillFetching,\n          stillFetching = _info$stillFetching === undefined ? false : _info$stillFetching,\n          resolve = info.resolve;\n      _this.responseReceivedInfo = null;\n\n      if (!stillFetching) {\n        _this._currentRequestKey = null;\n      }\n\n      var data = void 0; // If our response succeeded, then we use that data.\n\n      if (response && response.data) {\n        data = response.data;\n      } else if (cachedResponse && cachedResponse.data) {\n        // This happens when the request failed, but we have cache-and-network\n        // specified. Although we pass along the failed response, we continue to\n        // pass in the cached data.\n        data = cachedResponse.data;\n      }\n\n      data = data ? _this.props.transformData(data) : null; // If we already have some data in state on error, then we continue to\n      // pass that data down. This prevents the data from being wiped when a\n      // request fails, which is generally not what people want.\n      // For more, see: GitHub Issue #154\n\n      if (error && _this.state.data) {\n        data = _this.state.data;\n      }\n\n      var afterFetchInfo = {\n        url: url,\n        init: init,\n        requestKey: requestKey,\n        error: error,\n        failed: Boolean(error || response && !response.ok),\n        response: response,\n        data: data,\n        didUnmount: Boolean(_this.willUnmount)\n      };\n\n      if (typeof resolve === 'function') {\n        resolve(afterFetchInfo);\n      }\n\n      if (hittingNetwork) {\n        _this.props.afterFetch(afterFetchInfo);\n      }\n\n      if (_this.willUnmount) {\n        return;\n      }\n\n      _this.setState({\n        url: url,\n        data: data,\n        error: error,\n        response: response,\n        fetching: stillFetching,\n        requestKey: requestKey\n      }, function () {\n        return _this.props.onResponse(error, response);\n      });\n    };\n\n    _this.state = {\n      requestKey: props.requestKey || getRequestKey(_extends({}, props, {\n        method: props.method.toUpperCase()\n      })),\n      requestName: props.requestName,\n      fetching: false,\n      response: null,\n      data: null,\n      error: null,\n      url: props.url\n    };\n    return _this;\n  } // We default to being lazy for \"write\" requests,\n  // such as POST, PATCH, DELETE, and so on.\n\n\n  _createClass(Fetch, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (!this.isLazy()) {\n        this.fetchData();\n      }\n    } // Because we use `componentDidUpdate` to determine if we should fetch\n    // again, there will be at least one render when you receive your new\n    // fetch options, such as a new URL, but the fetch has not begun yet.\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var currentRequestKey = this.props.requestKey || getRequestKey(_extends({}, this.props, {\n        method: this.props.method.toUpperCase()\n      }));\n      var prevRequestKey = prevProps.requestKey || getRequestKey(_extends({}, prevProps, {\n        method: prevProps.method.toUpperCase()\n      }));\n\n      if (currentRequestKey !== prevRequestKey && !this.isLazy()) {\n        this.fetchData({\n          requestKey: currentRequestKey\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.willUnmount = true;\n      this.cancelExistingRequest('Component unmounted');\n    } // When a request is already in flight, and a new one is\n    // configured, then we need to \"cancel\" the previous one.\n    // When a subsequent request is made, it is important that the correct\n    // request key is used. This method computes the right key based on the\n    // options and props.\n\n  }]);\n\n  return Fetch;\n}(React.Component);\nvar globalObj = typeof self !== 'undefined' ? self : this;\nvar AbortSignalCtr = globalObj !== undefined ? globalObj.AbortSignal : function () {};\nFetch.propTypes = {\n  children: PropTypes.func,\n  requestName: PropTypes.string,\n  fetchPolicy: PropTypes.oneOf(['cache-first', 'cache-and-network', 'network-only', 'cache-only']),\n  onResponse: PropTypes.func,\n  beforeFetch: PropTypes.func,\n  afterFetch: PropTypes.func,\n  responseType: PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf(['json', 'text', 'blob', 'arrayBuffer', 'formData'])]),\n  transformData: PropTypes.func,\n  lazy: PropTypes.bool,\n  dedupe: PropTypes.bool,\n  requestKey: PropTypes.string,\n  url: PropTypes.string.isRequired,\n  body: PropTypes.any,\n  credentials: PropTypes.oneOf(['omit', 'same-origin', 'include']),\n  headers: PropTypes.object,\n  method: PropTypes.oneOf(['get', 'post', 'put', 'patch', 'delete', 'options', 'head', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS', 'HEAD']),\n  mode: PropTypes.oneOf(['same-origin', 'cors', 'no-cors', 'navigate', 'websocket']),\n  cache: PropTypes.oneOf(['default', 'no-store', 'reload', 'no-cache', 'force-cache', 'only-if-cached']),\n  redirect: PropTypes.oneOf(['manual', 'follow', 'error']),\n  referrer: PropTypes.string,\n  referrerPolicy: PropTypes.oneOf(['no-referrer', 'no-referrer-when-downgrade', 'origin', 'origin-when-cross-origin', 'unsafe-url', '']),\n  integrity: PropTypes.string,\n  keepalive: PropTypes.bool,\n  signal: PropTypes.instanceOf(AbortSignalCtr)\n};\nFetch.defaultProps = {\n  requestName: 'anonymousRequest',\n  onResponse: function onResponse() {},\n  beforeFetch: function beforeFetch() {},\n  afterFetch: function afterFetch() {},\n  transformData: function transformData(data) {\n    return data;\n  },\n  dedupe: true,\n  method: 'get',\n  referrerPolicy: '',\n  integrity: '',\n  referrer: 'about:client'\n};","map":null,"metadata":{},"sourceType":"module"}