{"ast":null,"code":"// This is a cache of in-flight requests. Each request key maps to an\n// array of Promises. When the request resolves, each promise in the\n// array is pushed to.\nvar requests = {};\nexport function getRequestKey() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$url = _ref.url,\n      url = _ref$url === undefined ? '' : _ref$url,\n      _ref$method = _ref.method,\n      method = _ref$method === undefined ? '' : _ref$method,\n      _ref$responseType = _ref.responseType,\n      responseType = _ref$responseType === undefined ? '' : _ref$responseType,\n      _ref$body = _ref.body,\n      body = _ref$body === undefined ? '' : _ref$body;\n\n  return [url, method.toUpperCase(), responseType, body].join('||');\n} // Returns `true` if a request with `requestKey` is in flight,\n// and `false` otherwise.\n\nexport function isRequestInFlight(requestKey) {\n  return Boolean(requests[requestKey]);\n}\nexport function clearRequestCache() {\n  requests = {};\n} // This loops through all of the handlers for the request and either\n// resolves or rejects them.\n\nfunction resolveRequest(_ref2) {\n  var requestKey = _ref2.requestKey,\n      res = _ref2.res,\n      err = _ref2.err;\n  var handlers = requests[requestKey] || [];\n  handlers.forEach(function (handler) {\n    if (res) {\n      handler.resolve(res);\n    } else {\n      handler.reject(err);\n    }\n  }); // This list of handlers has been, well, handled. So we\n  // clear the handlers for the next request.\n\n  requests[requestKey] = null;\n}\n\nexport function fetchDedupe(input) {\n  var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var dedupeOptions = arguments[2];\n  var opts = void 0,\n      initToUse = void 0;\n\n  if (dedupeOptions) {\n    opts = dedupeOptions;\n    initToUse = init;\n  } else if (init.responseType) {\n    opts = init;\n    initToUse = {};\n  } else {\n    opts = {};\n    initToUse = init;\n  }\n\n  var _opts = opts,\n      requestKey = _opts.requestKey,\n      _opts$responseType = _opts.responseType,\n      responseType = _opts$responseType === undefined ? '' : _opts$responseType,\n      _opts$dedupe = _opts.dedupe,\n      dedupe = _opts$dedupe === undefined ? true : _opts$dedupe; // Build the default request key if one is not passed\n\n  var requestKeyToUse = requestKey || getRequestKey({\n    // If `input` is a request, then we use that URL\n    url: input.url || input,\n    // We prefer values from `init` over request objects. With `fetch()`, init\n    // takes priority over a passed-in request\n    method: initToUse.method || input.method || '',\n    body: initToUse.body || input.body || ''\n  });\n  var proxyReq = void 0;\n\n  if (dedupe) {\n    if (!requests[requestKeyToUse]) {\n      requests[requestKeyToUse] = [];\n    }\n\n    var handlers = requests[requestKeyToUse];\n    var requestInFlight = Boolean(handlers.length);\n    var requestHandler = {};\n    proxyReq = new Promise(function (resolve, reject) {\n      requestHandler.resolve = resolve;\n      requestHandler.reject = reject;\n    });\n    handlers.push(requestHandler);\n\n    if (requestInFlight) {\n      return proxyReq;\n    }\n  }\n\n  var request = fetch(input, initToUse).then(function (res) {\n    var responseTypeToUse = void 0;\n\n    if (responseType instanceof Function) {\n      responseTypeToUse = responseType(res);\n    } else if (responseType) {\n      responseTypeToUse = responseType;\n    } else if (res.status === 204) {\n      responseTypeToUse = 'text';\n    } else {\n      responseTypeToUse = 'json';\n    } // The response body is a ReadableStream. ReadableStreams can only be read a single\n    // time, so we must handle that in a central location, here, before resolving\n    // the fetch.\n\n\n    return res[responseTypeToUse]().then(function (data) {\n      res.data = data;\n\n      if (dedupe) {\n        resolveRequest({\n          requestKey: requestKeyToUse,\n          res: res\n        });\n      } else {\n        return res;\n      }\n    }, function () {\n      res.data = null;\n\n      if (dedupe) {\n        resolveRequest({\n          requestKey: requestKeyToUse,\n          res: res\n        });\n      } else {\n        return res;\n      }\n    });\n  }, function (err) {\n    if (dedupe) {\n      resolveRequest({\n        requestKey: requestKeyToUse,\n        err: err\n      });\n    } else {\n      return Promise.reject(err);\n    }\n  });\n\n  if (dedupe) {\n    return proxyReq;\n  } else {\n    return request;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}