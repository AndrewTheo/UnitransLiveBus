{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\n(function () {\n  var assign,\n      camelCase,\n      capitalize,\n      isArray,\n      isEmpty,\n      isFunction,\n      isObject,\n      isPlainObject,\n      kebabCase,\n      snakeCase,\n      titleCase,\n      words,\n      slice = [].slice,\n      hasProp = {}.hasOwnProperty;\n\n  assign = function assign() {\n    var i, key, len, source, sources, target;\n    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n\n  isFunction = function isFunction(val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  };\n\n  isObject = function isObject(val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  };\n\n  isArray = function isArray(val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  };\n\n  isEmpty = function isEmpty(val) {\n    var key;\n\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n\n      return true;\n    }\n  };\n\n  isPlainObject = function isPlainObject(val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === 'function' && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);\n  };\n\n  words = function words(val) {\n    return (val.split(/[-_\\s]+|(?=[A-Z][a-z])/) || []).filter(function (n) {\n      return !!n;\n    });\n  };\n\n  camelCase = function camelCase(val) {\n    var i, index, len, r, ref, word;\n    r = '';\n    ref = words(val);\n\n    for (index = i = 0, len = ref.length; i < len; index = ++i) {\n      word = ref[index];\n      r += index ? capitalize(word.toLowerCase()) : word.toLowerCase();\n    }\n\n    return r;\n  };\n\n  titleCase = function titleCase(val) {\n    var i, index, len, r, ref, word;\n    r = '';\n    ref = words(val);\n\n    for (index = i = 0, len = ref.length; i < len; index = ++i) {\n      word = ref[index];\n      r += capitalize(word.toLowerCase());\n    }\n\n    return r;\n  };\n\n  kebabCase = function kebabCase(val) {\n    var i, index, len, r, ref, word;\n    r = '';\n    ref = words(val);\n\n    for (index = i = 0, len = ref.length; i < len; index = ++i) {\n      word = ref[index];\n      r += (index ? '-' : '') + word.toLowerCase();\n    }\n\n    return r;\n  };\n\n  snakeCase = function snakeCase(val) {\n    var i, index, len, r, ref, word;\n    r = '';\n    ref = words(val);\n\n    for (index = i = 0, len = ref.length; i < len; index = ++i) {\n      word = ref[index];\n      r += (index ? '_' : '') + word.toLowerCase();\n    }\n\n    return r;\n  };\n\n  capitalize = function capitalize(val) {\n    return val.charAt(0).toUpperCase() + val.slice(1);\n  };\n\n  module.exports.assign = assign;\n  module.exports.isFunction = isFunction;\n  module.exports.isObject = isObject;\n  module.exports.isArray = isArray;\n  module.exports.isEmpty = isEmpty;\n  module.exports.isPlainObject = isPlainObject;\n  module.exports.camelCase = camelCase;\n  module.exports.titleCase = titleCase;\n  module.exports.kebabCase = kebabCase;\n  module.exports.snakeCase = snakeCase;\n  module.exports.capitalize = capitalize;\n  module.exports.words = words;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}